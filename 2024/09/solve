#!/usr/bin/perl

use v5.38;
use integer;

@ARGV = shift // "input";

my $solution_1 = 0;
my $solution_2 = 0;

my $line = readline;
my @map  = $line =~ /./g;
push @map, 0 if @map % 2;

my ( @B, @files, @frees );
my $file = 0;

# build disk map
# keep file and free space for part 2
for my ( $len, $space ) (@map) {
    $files[$file] = [ scalar @B, $len ];
    push @B, $file for 1 .. $len;
    $frees[$file] = [ scalar @B, $space ];
    push @B, '.' for 1 .. $space;
    $file++;
}

# part1
my @B1 = @B;
my ( $l, $r ) = ( 0, $#B1 );
while (1) {
    while ( $B1[$l] ne '.' ) { ++$l }
    while ( $B1[$r] eq '.' ) { --$r }
    @B1[ $l, $r ] = @B1[ $r, $l ];
    last if ++$l >= --$r;
}
while ( my ( $i, $b ) = each @B1 ) {
    next if $b eq '.';
    $solution_1 += $i * $b;
}

# part2
my @B2 = @B;
$r = $file - 1;
while (1) {
    my ( $file, $len ) = @{ $files[$r] };
    for my $l ( 0 .. $r - 1 ) {
        my ( $free, $space ) = @{ $frees[$l] };
        next if $len > $space;
        for ( 1 .. $len ) {
            @B2[ $free, $file ] = @B2[ $file, $free ];
            ++$file;
            ++$free;
            --$space;
        }
        $frees[$l] = [ $free, $space ];
        last;
    }
    last if --$r == 0;
}
while ( my ( $i, $b ) = each @B2 ) {
    next if $b eq '.';
    $solution_2 += $i * $b;
}

say "Solution 1: $solution_1";
say "Solution 2: $solution_2";

# vim:ft=perl:sts=4:sw=4:et
