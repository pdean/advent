#!/usr/bin/perl

use v5.38;
use feature qw(multidimensional);

@ARGV = shift // "input";

my $solution_1 = 0;
my $solution_2 = 0;

my ( %ant, %nodes1, %nodes2 );

my $grid = [ map { [/./g] } <> ];
my $C    = @{ $$grid[0] } - 1;
my $R    = @$grid - 1;

for my $r ( 0 .. $R ) {
    for my $c ( 0 .. $C ) {
        my $a = $$grid[$r][$c];
        if ( $a ne "." ) {
            push @{ $ant{$a} }, [ $r, $c ];
        }
    }
}

for my $r ( 0 .. $R ) {
    for my $c ( 0 .. $C ) {
        for my $k ( keys %ant ) {
            my @a = @{ $ant{$k} };
            next if @a < 2;
            for my $i ( 0 .. $#a ) {
                for my $j ( 0 .. $#a ) {
                    next if $i == $j;
                    my ( $ri, $ci ) = @{ $a[$i] };
                    my ( $rj, $cj ) = @{ $a[$j] };

                    my $di = abs( $r - $ri ) + abs( $c - $ci );
                    my $dj = abs( $r - $rj ) + abs( $c - $cj );

                    my $dri = $r - $ri;
                    my $dci = $c - $ci;
                    my $drj = $r - $rj;
                    my $dcj = $c - $cj;

                    if ( $dri * $dcj == $dci * $drj ) {
                        if ( $di == 2 * $dj || $dj == 2 * $di ) {
                            ++$nodes1{ $r, $c };
                        }
                        ++$nodes2{ $r, $c };
                    }
                }
            }
        }
    }
}

$solution_1 = keys %nodes1;
$solution_2 = keys %nodes2;

say "Solution 1: $solution_1";
say "Solution 2: $solution_2";

# vim:ft=perl:sts=4:sw=4:et
