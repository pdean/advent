#!/usr/bin/perl

use v5.38;
use feature qw(multidimensional);

@ARGV = shift // "input";

my $solution_1 = 0;
my $solution_2 = 0;

my %D = ( 'v', [ 1, 0 ], '^', [ -1, 0 ], '<', [ 0, -1 ], '>', [ 0, 1 ] );
my %N = ( '#', '##', '.', '..', 'O', '[]', '@', '@.' );

$/ = '';
my $grid  = [ map { [/./g] } split /\n/, <> ];
my @moves = <> =~ /./g;

my $grid2;
for my $r (@$grid) {
    my @n;
    for my $z (@$r) {
        push @n, split '', $N{$z};
    }
    push @$grid2, [@n];
}

# part 1
my $R = @$grid - 1;
my $C = @{ $$grid[0] } - 1;

my ( $r0, $c0 );
for my $r ( 0 .. $R ) {
    for my $c ( 0 .. $C ) {
        my $z = $$grid[$r][$c];
        if ( $z eq '@' ) {
            ( $r0, $c0 ) = ( $r, $c );
            $$grid[$r][$c] = '.';
            last;
        }
    }
}

MOVE:
for my $m (@moves) {
    my ( $dr, $dc ) = @{ $D{$m} };
    my ( $nr, $nc ) = ( $r0 + $dr, $c0 + $dc );
    my $z = $$grid[$nr][$nc];
    next MOVE if $z eq '#';
    if ( $z eq '.' ) {
        ( $r0, $c0 ) = ( $nr, $nc );
        next MOVE;
    }

    # boxes
    my ( $br, $bc ) = ( $nr, $nc );
    while (1) {
        $br += $dr;
        $bc += $dc;
        $b = $$grid[$br][$bc];
        next MOVE if $b eq '#';
        if ( $b eq '.' ) {
            $$grid[$br][$bc] = 'O';
            $$grid[$nr][$nc] = '.';
            ( $r0, $c0 ) = ( $nr, $nc );
            next MOVE;
        }
    }
}

for my $r ( 0 .. $R ) {
    for my $c ( 0 .. $C ) {
        my $z = $$grid[$r][$c];
        if ( $z eq 'O' ) {
            $solution_1 += 100 * $r + $c;
        }
    }
}

# part 2

say "@$_" for @$grid2;
$R = @$grid2 - 1;
$C = @{ $$grid2[0] } - 1;

for my $r ( 0 .. $R ) {
    for my $c ( 0 .. $C ) {
        my $z = $$grid2[$r][$c];
        if ( $z eq '@' ) {
            ( $r0, $c0 ) = ( $r, $c );
            $$grid2[$r][$c] = '.';
            last;
        }
    }
}
say "$r0 $c0";

MOVE2:
for my $m (@moves) {
    my ( $dr, $dc ) = @{ $D{$m} };
    my ( $nr, $nc ) = ( $r0 + $dr, $c0 + $dc );
    my $z = $$grid2[$nr][$nc];
    next MOVE2 if $z eq '#';
    if ( $z eq '.' ) {
        ( $r0, $c0 ) = ( $nr, $nc );
        next MOVE2;
    }

    # boxes
    my (@Q, %V, %D);
    push @Q, [$r0, $c0];
    $V{$r0, $c0}++;

    while ( my $next = shift @Q ) {
        my ( $r, $c ) = @$next;
        NB:
        for my ( $vr, $vc ) ( -1, 0, 0, 1, 1, 0, 0, -1 ) {
            my $br = $r + $vr;
            my $bc = $c + $vc;
            my $b = $$grid2[$br][$bc];
            next MOVE2 if $vr == $dr && $vc == $dc && $b eq '#';
            next NB if $b eq '#';
            if ($b eq '.') {
                $D{$r, $c}++ if $vr == -$dr && $vc == -$dc; 
                next NB;
            }
            next if $V{$br, $bc};
            push @Q, [ $br, $bc ];
            $V{$br, $bc}++;
        }
    }
    # move boxes
    my @new;
    for my ($k, $v) (%V) {
        my ($r, $c) = split $;, $k;
        push @new, [$r+$dr, $c+$dc, $$grid2[$r][$c]];
    }
    for my ($k, $v) (%D) {
        my ($r, $c) = split $;, $k;
        push @new, [$r, $c, '.'];
    }
    for my $p (@new) {
        my ($r, $c, $z) = @$p;
        $$grid2[$r][$c] = $z;
    }
}
        
say "@$_" for @$grid2;


for my $r ( 0 .. $R ) {
    for my $c ( 0 .. $C ) {
        my $z = $$grid2[$r][$c];
        if ( $z eq '[' ) {
            $solution_2 += 100 * $r + $c;
        }
    }
}

say "Solution 1: $solution_1";
say "Solution 2: $solution_2";

# vim:ft=perl:sts=4:sw=4:et
