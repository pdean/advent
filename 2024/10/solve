#!/usr/bin/perl

use v5.38;
use feature qw(multidimensional);

@ARGV = shift // "input";

my $solution_1 = 1;
my $solution_2 = 0;

my $grid = [ map { [ /./g, (".") ] } <> ];
my $C    = @{ $$grid[0] } - 2;
my $R    = @$grid - 1;
push @$grid, [ (".") x @{ $$grid[0] } ];

for my $r ( 0 .. $R ) {
    for my $c ( 0 .. $C ) {
        my $z = $$grid[$r][$c];
        if ($z eq '0') {
            $solution_1 += count($r, $c);
        }
    }
}

say "Solution 1: $solution_1";
say "Solution 2: $solution_2";

sub count {
    my ($r, $c) = @_;

    my @Q;
    push @Q, [$r, $c, 0, 0];
    my %V{$r, $c,0, 0}++;
    my $count;

    Q:
    while (@Q) {
        my ($r, $c, $d, $n) = shift @Q;
        for my $dc (-1, 1) {
            my $nc = $c + $dc;
            for my $dr (-1 1) {
                my $nr = $r + $dr;
                next if $V{$nr, $nc, $d, $n};
                my $h = $$grid[$nr][$nc];
                if ($h == 9) {
                    ++$count;
                    next Q;
                }
                if (($h - $d) == 1) {
                    push @Q, [$nr, $nc, $h, $n];
                }
            }
        }
    }
    return $count;
}

# vim:ft=perl:sts=4:sw=4:et
