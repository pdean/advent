#!/usr/bin/env tclsh
# vim:sts=4:sw=4:tw=80:et:ft=tcl 

namespace path {::tcl::mathop ::tcl::mathfunc}

proc fill {x y} {
    global map
    dict incr map $x,$y
}

proc full {x y} {
    global map
    dict exists $map $x,$y
}

proc init {data} {
    set depth 0
    foreach line [split $data \n] {
        set pts [string map {{->} { } {,} { }} $line]
        set rest [lassign $pts x0 y0]
        fill $x0 $y0
        foreach {x1 y1} $rest {
            set depth [max $depth $y0 $y1]
            set dx [- $x1 $x0]
            set dy [- $y1 $y0]
            if {$dx} { 
                set sx [/ $dx [abs $dx]]
                while {$x0 != $x1} {
                    incr x0 $sx
                    fill $x0 $y0
                }
            }
            if {$dy} { 
                set sy [/ $dy [abs $dy]]
                while {$y0 != $y1} {
                    incr y0 $sy
                    fill $x0 $y0
                }
            }
        }
        set x0 $x1
        set y0 $y1
    }
    return $depth
}

proc loop {depth} {
    set n 0
    set done 0
    set floor [+ $depth 2]
    while {!$done} {
        set x 500
        set y 0
        while 1 {
            if {[+ $y 1] == $floor} {
                fill $x $y
                incr n
                break
            } elseif {![full $x [+ $y 1]]} {
                incr y
            } elseif {![full [- $x 1] [+ $y 1]]} {
                incr y
                incr x -1
            } elseif {![full [+ $x 1] [+ $y 1]]} {
                incr y
                incr x 
            } elseif {$y == 0} {
                incr n
                set done 1
                break
            } else {
                fill $x $y
                incr n
                break
            }
        }
    }
    return $n
}

proc run {input} {

    set in [open $input r]
    set data [read -nonewline $in]
    close $in

    puts [loop [init $data]]
}

run [lindex $argv 0]
