#!/usr/bin/env tclsh
# vim:sts=4:sw=4:tw=80:et:ft=tcl 
# see gravitars solution

namespace path [list ::tcl::mathop ::tcl::mathfunc]

#floyd-warshall
proc floyd {} {
    global distance valves links
    foreach u $valves {
        foreach v $valves {
            set distance($u,$v) Inf
        }
        set distance($u,$u) 0
        foreach v $links($u)] {
            set distance($u,$v) 1
        }
    }
    foreach k $valves {
        foreach u $valves {
            foreach v $valves {
                set uk $distance($u,$k)
                set kv $distance($k,$v)
                set uv $distance($u,$v)
                set distance($u,$v) [min $uv [+ $uk $kv]]
            }
        }
    }
}

# dfs
proc visit {valve time bitmask pressure} {
    global distance index answer targets

    if {![info exists answer($bitmask)]} {
        set answer($bitmask) $pressure 
    } else {
        set answer($bitmask) [max $pressure $answer($bitmask)]
    } 

    foreach {valve2 rate} [array get targets] {
        set bits $index($valve2)
        set dist $distance($valve,$valve2)
        set timeleft [- $time 1 $dist]
        if {$timeleft <= 0 || [& $bitmask $bits]  } continue
        visit $valve2 $timeleft [| $bitmask $bits] \
                [+ $pressure [* $timeleft $rate]]
    }
}

proc run {} {
    global distance valves links index targets answer

    set data [read -nonewline stdin]
    set data [string map {; " " , " " = " "} $data]
    set valves [list]

    foreach line [split $data \n] {
        set valve [lindex $line 1]
        set rate [lindex $line 5]
        set tunnels [lrange $line 10 end]
        lappend valves $valve
        set rates($valve) $rate
        set links($valve) $tunnels
        if {$rate > 0} {
            set targets($valve) $rate
        }
    }

    set n [llength $valves]
    for {set i 0} {$i < $n} {incr i} {
        set bits [<< 1 $i]
        set valve [lindex $valves $i]
        set index($valve) $bits
    }

    floyd

    visit AA 26 0 0 

    set res 0
    foreach {key1 val1} [array get answer] {
        foreach {key2 val2} [array get answer] {
            if {![& $key1 $key2]} {
                set res [max $res [+ $val1 $val2]]
            }
        }
    }

    puts $res

}

run
