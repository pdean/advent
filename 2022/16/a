#!/usr/bin/env tclsh
# vim:sts=4:sw=4:tw=80:et:ft=tcl 

namespace path [list ::tcl::mathop ::tcl::mathfunc]
package require struct::graph::op
package require struct::set

proc run {} {

    set data [read -nonewline stdin]
    set data [string map {; " " , " " = " "} $data]

    struct::graph cave

    foreach line [split $data \n] {
        set valve [lindex $line 1]
        set rate [lindex $line 5]
        set valves [lrange $line 10 end]

        if {$rate != 0} {
            struct::set include destv $valve
        }

        if {![cave node exists $valve]} {
            cave node insert $valve
        }
        cave node set $valve rate $rate

        foreach v $valves {
            if {![cave node exists $v]} {
                cave node insert $v
            }
            cave arc insert $valve $v
        }
    }
    cave arc setunweighted 1

    puts ""

    set time 30
    set flow 0
    set dests {AA DD BB JJ HH EE CC}

    set rest [lassign $dests org]

    foreach dest $rest {
        puts $org
         foreach d $destv {
            set t $time
            set dist [::struct::graph::op::distance cave $org $d]
            set rate [cave node get $d rate]
            set t [- $time 1 $dist]
            set val [* $rate $time ] 
            puts "     $t $org $d $dist $rate $val"
        }

        set dist [::struct::graph::op::distance cave $org $dest]
        set rate [cave node get $dest rate]
        set time [- $time 1 $dist]
        set val [* $rate $time] 
        incr flow $val
        puts "$time $org $dest $dist $rate $val $flow"
        set org $dest
        struct::set exclude destv $org

        puts ""
        
   }



}

run
