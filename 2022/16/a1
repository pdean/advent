#!/usr/bin/env tclsh
# vim:sts=4:sw=4:tw=80:et:ft=tcl 

namespace path [list ::tcl::mathop ::tcl::mathfunc]
package require struct::graph::op
package require struct::set

proc bestflow {cur time seen targets} {
    global adj

    ::struct::set include seen $cur
    ::struct::set subtract targets $seen

    set bestflow 0
    foreach target $targets {
        set dist [dict get $adj "$cur $target"]
        set timeleft [- $time 1 $dist]
        if {$timeleft > 0} {
            set rate [cave node get $target rate]
            set flow [* $rate $timeleft] 
            set nextflow [bestflow $target $timeleft $seen $targets]
            incr flow $nextflow
            if {$flow > $bestflow} {
                set bestflow $flow
            }
        }
    }
    return $bestflow
}

proc run {} {
    global adj rates links

    set data [read -nonewline stdin]
    set data [string map {; " " , " " = " "} $data]


    set valves [list]

    foreach line [split $data \n] {
        set valve [lindex $line 1]
        set rate [lindex $line 5]
        set tunnels [lrange $line 10 end]
        lappend valves $valve
        dict set rates $valve $rate
        dict set links $valve $tunnels
    }

    set targets [list AA]
    lappend targets {*}[dict keys \
        [dict filter $rates script {valve rate} {
            != $rate 0}]]
    puts $targets

    set adj [list]

    foreach start $valves {
        if {$start ni $targets} continue
        puts "start $start"
        set done [list]
        set todo [list $start 0]
        dict incr done $start

        while [llength $todo] {
            set todo [lassign $todo cur dist]
            puts "   to $cur $dist"
            incr dist
            foreach new [dict get $links $cur] {
                if {[dict exists $done $new]} continue
                lappend todo $new $dist
                dict incr done $new
                if {$new in $targets} {
                    dict set adj "$start $new" $dist
                }
            }
        }
    }

    puts $adj


#    puts [bestflow AA 30 {} $targets]
}

run
