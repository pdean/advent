#!/usr/bin/env tclsh
# vim:sts=4:sw=4:tw=80:et:ft=tcl 
# see gravitars solution

namespace path [list ::tcl::mathop ::tcl::mathfunc]

#floyd-warshall
proc floyd {} {
    global distance valves links
    foreach u $valves {
        foreach v $valves {
            dict set distance "$u $v" Inf
        }
        dict set distance "$u $u" 0
        foreach v [dict get $links $u] {
            dict set distance "$u $v" 1
        }
    }
    foreach k $valves {
        foreach u $valves {
            foreach v $valves {
                set uk [dict get $distance "$u $k"]
                set kv [dict get $distance "$k $v"]
                set uv [dict get $distance "$u $v"]
                dict set distance "$u $v" \
                    [min $uv [+ $uk $kv]]
            }
        }
    }
}

# dfs
proc visit {valve time bitmask pressure} {
    global distance index answer targets

    if {![dict exists $answer $bitmask]} {
        dict set answer $bitmask $pressure 
    } else {
        dict set answer $bitmask \
            [max $pressure [dict get $answer $bitmask]]
    } 

    dict for {valve2 rate} $targets {
        set bits [dict get $index $valve2]
        if { [& $bitmask $bits] } continue
        set dist [dict get $distance "$valve $valve2"]
        set timeleft [- $time 1 $dist]
        if {$timeleft > 0} {
            visit $valve2 $timeleft [| $bitmask $bits] \
                [+ $pressure [* $timeleft $rate]]
        }
    }
}

proc run {} {
    global distance valves links index targets answer

    set data [read -nonewline stdin]
    set data [string map {; " " , " " = " "} $data]
    set valves [list]

    foreach line [split $data \n] {
        set valve [lindex $line 1]
        set rate [lindex $line 5]
        set tunnels [lrange $line 10 end]
        lappend valves $valve
        dict set rates $valve $rate
        dict set links $valve $tunnels
    }

    set n [llength $valves]
    for {set i 0} {$i < $n} {incr i} {
        set bits [<< 1 $i]
        set valve [lindex $valves $i]
        dict set index $valve $bits
    }

    set targets [dict filter $rates script {valve rate} {
            != $rate 0}]

    floyd
    set answer [list]
    visit AA 30 0 0 
    puts [max {*}[dict values $answer]]
    
}

run
